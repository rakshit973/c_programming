struct path {
  int dist;
  int node;
};

/* Minimum heap where paths will be sorted on distance. */
struct path_heap {
  struct path* data;
  int size;
  int cap;
};

void path_heap_init(struct path_heap* obj);

void path_heap_uninit(struct path_heap* obj);

int path_heap_size(const struct path_heap* obj);

struct path path_heap_pop(struct path_heap* obj);

void path_heap_push(struct path_heap* obj, struct path value);

int min_distance(
    int n,
    int* edges[],
    int by_node_paths_idx[],
    int source,
    int dest,
    int target,
    struct path_heap* heap,
    int dist_from_source_out[]) {
  /* Initialise the best to be target + 1 since there is no point continuing
   * beyond the target. We just want to force an adjustment to the edges. */
  for (int i = 0; i < n; ++i) {
    dist_from_source_out[i] = target + 1;
  }

  path_heap_push(heap, (struct path) {.dist = 0, .node = source});
  while (path_heap_size(heap)) {
    struct path curr = path_heap_pop(heap);
    /* Terminate if we've found a route to the destination */
    if (curr.node == dest) {
      return curr.dist;
    }

    /* Add to the heap any path that produces a smaller, total distance, to this
     * nodes neighbour. */
    int first = by_node_paths_idx[curr.node];
    int last = by_node_paths_idx[curr.node + 1];
    while (first != last) {
      int* edge = edges[first++];
      if (0 > edge[2]) {
        /* Node has no assigned weight yet and so should be ignored. */
        continue;
      }

      const int new_dist = curr.dist + edge[2];
      int next_node = (curr.node == edge[0]) ? edge[1] : edge[0];
      if (new_dist < dist_from_source_out[next_node]) {
        dist_from_source_out[next_node] = new_dist;
        path_heap_push(heap, (struct path) {.dist = new_dist, .node = next_node});
      }
    }
  }

  return INT_MAX;
}

int** modifiedGraphEdges(int n, int** edges, int edgesSize, int* edgesColSize, int source, int destination, int target, int* returnSize, int** returnColumnSizes){
  struct path_heap heap;
  path_heap_init(&heap);

  int* const dist_from_source = malloc(n * sizeof(*dist_from_source));

  /* Take a copy of the incoming edges so we can modify it, while at the same
   * time doing a counting sort to group edges by source node.
   * - ret -> Will hold a copy of each edge
   * - edges_by_node -> Will hold all edges, grouped by souce node (as each
   *   edge is undirected, it will appear twice, using each node as a source)
   * - edges_by_node_range[node] -> Will hold the first index in edges_by_node
   *   where node is a source
   * - edges_by_node_range[node + 1] -> Will hold the just past the last index
   *   in edges_by_node where node is a source.
   */
  int** ret = malloc(edgesSize * sizeof(*ret));
  int** const edges_by_node = malloc(2 * edgesSize * sizeof(*edges_by_node));
  int* const edges_by_node_range = calloc(n + 1, sizeof(*edges_by_node_range));
  for (int i = 0; i < edgesSize; ++i) {
    ret[i] = malloc(3 * sizeof(*ret[i]));
    memcpy(ret[i], edges[i], *edgesColSize * sizeof(**ret));
    ++edges_by_node_range[ret[i][0]];
    ++edges_by_node_range[ret[i][1]];
  }
  for (int i = 1; i < n; ++i) {
    edges_by_node_range[i] += edges_by_node_range[i - 1];
  }
  for (int i = 0; i < edgesSize; ++i) {
    int n1 = ret[i][0];
    int n2 = ret[i][1];
    edges_by_node[--edges_by_node_range[n1]] = ret[i];
    edges_by_node[--edges_by_node_range[n2]] = ret[i];
  }
  memset(edges_by_node_range, 0, (n + 1) * sizeof(*edges_by_node_range));
  for (int i = 0; i < edgesSize; ++i) {
    ++edges_by_node_range[ret[i][0] + 1];
    ++edges_by_node_range[ret[i][1] + 1];
  }
  for (int i = 1; i <= n; ++i) {
    edges_by_node_range[i] += edges_by_node_range[i - 1];
  }

  /* Try and find the minimal distance path without using wildcard edges */
  bool has_solution = false;
  int min_dist_to_dest = min_distance(n, edges_by_node, edges_by_node_range, source, destination, target, &heap, dist_from_source);
  has_solution = (min_dist_to_dest == target);
  if (min_dist_to_dest >= target) {
    /* We may already have a solution, in which case we just need to assign
     * a large weight to each wildcard. The other option is that we need to
     * reduce min_dist_to_dest. The best thing to do is assign the minimum
     * weight of 1 of each wildcard edge and try to find the minimum distance
     * again. If we undershoot target, it is easy to calculate the difference
     * we need to increase the weight by. After that we just need to give all
     * other wildcards a large weight. */
    for (int i = 0; i < edgesSize; ++i) {
      if (0 <= ret[i][2]) {
        /* Not a wildcard weight and so there is nothing we can do */
        continue;
      }

      if (!has_solution) {
        /* Set the weight to the smallest possible value first, if we then get
         * a route that is below target, increase the weight by the difference
         * to make a solution. */
        ret[i][2] = 1;
        min_dist_to_dest = min_distance(n, edges_by_node, edges_by_node_range, source, destination, target, &heap, dist_from_source);
        if (min_dist_to_dest <= target) {
          has_solution = true;
          ret[i][2] += target - min_dist_to_dest;
        }
      } else {
        /* Already have a solution, just want to assign a weight that makes
         * sure the path is not taken. Set it to target + 1 since
         * source -> destination must already have minimum weight of target. */
        ret[i][2] = target + 1;
      }
    }
  }

  if (!has_solution) {
    /* Remember to return memory allocated to prepare a return since there is
     * no solution. */
    for (int i = 0; i < edgesSize; ++i) {
      free(ret[i]);
    }
    free(ret);
    ret = NULL;
    *returnSize = 0;
    *returnColumnSizes = NULL;
  } else {
    /* There is a solution, so we need to fill out the rest of the return
     * parameters. */
    *returnSize = edgesSize;
    *returnColumnSizes = malloc(*returnSize * sizeof(**returnColumnSizes));
    for (int i = 0; i < edgesSize; ++i) {
      (*returnColumnSizes)[i] = 3;
    }
  }

  path_heap_uninit(&heap);
  free(dist_from_source);
  free(edges_by_node);
  free(edges_by_node_range);

  return ret;
}

void path_heap_init(struct path_heap* obj) {
  memset(obj, 0, sizeof(*obj));
}

void path_heap_uninit(struct path_heap* obj) {
  free(obj->data);
}

int path_heap_size(const struct path_heap* obj) {
  return obj->size;
}

struct path path_heap_pop(struct path_heap* obj) {
  struct path ret = obj->data[0];
  --obj->size;
  int idx = 0;
  for (;;) {
    const int left = idx * 2 + 1;
    const int right = idx * 2 + 2;
    int to_move = obj->size;
    if (left < obj->size && obj->data[left].dist < obj->data[to_move].dist) {
      to_move = left;
    }
    if (right < obj->size && obj->data[right].dist < obj->data[to_move].dist) {
      to_move = right;
    }
    if (to_move == obj->size) {
      break;
    }
    obj->data[idx] = obj->data[to_move];
    idx = to_move;
  }
  obj->data[idx] = obj->data[obj->size];
  return ret;
}

void path_heap_push(struct path_heap* obj, struct path value) {
  if (obj->size == obj->cap) {
    obj->cap = (obj->cap) ? obj->cap * 2 : 8;
    obj->data = realloc(obj->data, obj->cap * sizeof(*obj->data));
  }

  int idx = obj->size++;
  while (idx && obj->data[(idx - 1) / 2].dist > value.dist) {
    obj->data[idx] = obj->data[(idx - 1) / 2];
    idx = (idx - 1) / 2;
  }
  obj->data[idx] = value;
}


int* getGoodIndices(int** variables, int variablesSize, int* variablesColSize, int target, int* returnSize) {
    int map[9][4] = {{1,1,1,1},{2,4,8,6},{3,9,7,1},{4,6,4,6},{5,5,5,5},{6,6,6,6},{7,9,3,1},{8,4,2,6},{9,1,9,1}};
    int* ans = (int*)calloc(variablesSize, sizeof(int));
    int ansIdx = 0;
    for(int i = 0; i < variablesSize; i++){
        if(variables[i][3] <= target)
            continue;
        int currDigit = variables[i][0] % 10;
        if(currDigit){
            currDigit--;
            currDigit = map[currDigit][(variables[i][1]-1) % 4];
			/* calculate pow(currDigit, variables[i][2]) % variables[i][3] */
            int val = 1;
            for(int j = 0; j < variables[i][2]; j++)
                val = (val * currDigit) % variables[i][3];
            currDigit = val;
        }
        if(currDigit == target)
            ans[ansIdx++] = i;
    }
    *returnSize = ansIdx;
    return ans;
}

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

void dfs(struct TreeNode* node, int* result, int* resPos, int* maxCount,
         int* prevVal, int* count, bool isFirst) {
    if (node->left) {
        dfs(node->left, result, resPos, maxCount, prevVal, count, false);
    }

    if (node->val == *prevVal) {
        ++(*count);
    } else {
        if (*count > *maxCount) {
            *maxCount = *count;
            *resPos = 1;
            result[0] = *prevVal;
        } else if (*count == *maxCount && !isFirst) {
            result[(*resPos)++] = *prevVal;
        }

        *prevVal = node->val;
        *count = 1;
    }

    if (node->right) {
        dfs(node->right, result, resPos, maxCount, prevVal, count, false);
    }
}


int* findMode(struct TreeNode* root, int* returnSize) {
    int buffer[10001];
    int bufPos = 0;
    int prevVal = !root->val;
    int count = 0;
    int maxCount = 0;

    dfs(root, buffer, &bufPos, &maxCount, &prevVal, &count, true);

    if (count == maxCount) {
        buffer[bufPos++] = prevVal;
    } else if (count > maxCount) {
        bufPos = 1;
        buffer[0] = prevVal;
    }

    int* result = (int*)malloc(bufPos * sizeof(int));

    memcpy(result, buffer, bufPos * sizeof(int));
    *returnSize = bufPos;

    return result;
}

typedef struct {
    int capital;
    int profit;
} Project;

int cmp(const void* a, const void* b) {
    return ((Project*)a)->capital - ((Project*)b)->capital;
}

void push(int* heap, int* heapSize, int val) {
    heap[(*heapSize)++] = val;
    int i = *heapSize - 1;
    while (i > 0 && heap[i] > heap[(i - 1) / 2]) {
        int temp = heap[i];
        heap[i] = heap[(i - 1) / 2];
        heap[(i - 1) / 2] = temp;
        i = (i - 1) / 2;
    }
}

int pop(int* heap, int* heapSize) {
    int result = heap[0];
    heap[0] = heap[--(*heapSize)];
    int i = 0;
    while (1) {
        int leftChild = 2 * i + 1;
        int rightChild = 2 * i + 2;
        int largest = i;
        if (leftChild < *heapSize && heap[leftChild] > heap[largest]) largest = leftChild;
        if (rightChild < *heapSize && heap[rightChild] > heap[largest]) largest = rightChild;
        if (largest == i) break;
        int temp = heap[i];
        heap[i] = heap[largest];
        heap[largest] = temp;
        i = largest;
    }
    return result;
}

int findMaximizedCapital(int k, int w, int* profits, int profitsSize, int* capital, int capitalSize) {
    int currentProjectsCount = 0, totalCapital = w;
    Project* projects = (Project*)malloc(profitsSize * sizeof(Project));
    for (int i = 0; i < profitsSize; i++) {
        projects[i].capital = capital[i];
        projects[i].profit = profits[i];
    }
    qsort(projects, profitsSize, sizeof(Project), cmp);
    
    int* heap = (int*)malloc(profitsSize * sizeof(int));
    int heapSize = 0;
    int i = 0;
    while (currentProjectsCount < k) {
        while (i < profitsSize && projects[i].capital <= totalCapital) {
            push(heap, &heapSize, projects[i].profit);
            i++;
        }
        if (heapSize == 0) break;
        totalCapital += pop(heap, &heapSize);
        currentProjectsCount++;
    }
    free(projects);
    free(heap);
    return totalCapital;
}

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

int* nextGreaterElements(int* nums, int numsSize, int* returnSize) {
    int n = numsSize;
    *returnSize = n;

    // Allocate space for the result array and initialize with -1
    int* result = (int*)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        result[i] = -1;
    }

    // Stack to store indices of elements
    int* stack = (int*)malloc(n * 2 * sizeof(int));
    int top = -1;

    // Traverse the array twice (circular array simulation)
    for (int i = 2 * n - 1; i >= 0; i--) {
        int current = nums[i % n];

        // Pop elements smaller than or equal to the current element
        while (top != -1 && nums[stack[top]] <= current) {
            top--;
        }

        // If stack is not empty and we are in the first traversal (i < n)
        if (top != -1 && i < n) {
            result[i] = nums[stack[top]];
        }

        // Push the current index onto the stack
        stack[++top] = i % n;
    }

    // Free the stack memory
    free(stack);

    return result;
}

char * convertToBase7(int num){
    if(num == 0) return "0";
    char * result = (char *)malloc(12*sizeof(char));
    int count = 0;
    bool checkNeg = num < 0 ? true : false;
    if(num < 0) num = abs(num);
    while(num > 0)
    { 
        result[count++] = num % 7 + '0';
        num /= 7;
    }
    if(checkNeg) result[count++] = '-';
    for(int i=0; i<count/2; i++)
    {
        int temp = result[i];
        result[i] = result[count-i-1];
        result[count-i-1] = temp;
    }
    result[count] = 0;
    return result;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

int binSearch(int *a, int n, int val);

int compare(const void *a, const void *b) {
    return *(int*) b - *(int*) a;
}

char** findRelativeRanks(int* score, int scoreSize, int* returnSize) {
    int i, rank, ranks[scoreSize];
    char **placements = (char**) malloc(scoreSize * sizeof(char*));
    memcpy(ranks, score, sizeof(ranks));
    qsort(ranks, scoreSize, sizeof(int), compare);
    for (i = 0; i < scoreSize; ++i) {
        rank = binSearch(ranks, scoreSize, score[i]);
        switch(rank) {
            case 0:
                placements[i] = strdup("Gold Medal");
                break;
            case 1:
                placements[i] = strdup("Silver Medal");
                break;
            case 2:
                placements[i] = strdup("Bronze Medal");
                break;
            default:
                placements[i] = (char*) malloc(6 * sizeof(char));
                sprintf(placements[i], "%d", rank+1);
        }
    }
    *returnSize = scoreSize;
    return placements;
}

int binSearch(int *a, int n, int val) {
    int lo = 0, mid, hi = n-1;
    while (lo <= hi) {
        mid = (lo + hi) >> 1;
        if (a[mid] == val) break;
        if (a[mid] < val) hi = mid - 1;
        else lo = mid + 1;
    }
    return mid;
}

bool checkPerfectNumber(int num){
    if(num == 1) return false;
    int sum = 1;
    for(int i=2; i<=sqrt(num); i++)
        if(num%i == 0)
            sum+=i + num/i;
    return sum == num;
}

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int f(struct TreeNode *root,int**array,int*index){
    if(!root)
        return 0;
    int sum = f(root->left,array,index) + f(root->right,array,index)  + root->val;
    (*array)[(*index)++] = sum;
    return sum;
}
int cmp(const void *a , const void *b){
    return *(int*)a - *(int*)b;
}
int* findFrequentTreeSum(struct TreeNode* root, int* returnSize) {
    int*array = calloc(10001,sizeof(int));
    int index = 0 ;
    f(root,&array,&index);
    array = realloc(array,sizeof(int)*index);
    qsort(array,index,sizeof(int),cmp);
    int count = 0;
    int max = INT_MIN;
    int e = array[0];
    int*ret = malloc(sizeof(int)*index);
    int i2 = 0;
    for(int i = 0 ; i < index ; ){
        while(i < index && array[i] == e){
            count++;
            i++;
        }
        if(max < count){
            max = count;
            i2 = 0;
            ret[i2++] = e;
        }
        else if(count == max)
            ret[i2++] = e;
        if(i >= index )
            break;
        e = array[i];
        count = 0;
    }
    ret = realloc(ret,sizeof(int)*i2);
    *returnSize = i2;
    return ret;
}



int fib(int n){
    if(n==0){
        return 0;
    }
    if(n==1){
        return 1;
    }
    return fib(n-2)+fib(n-1);
}

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int findBottomLeftValue(struct TreeNode* root) {
    struct TreeNode** queue = (struct TreeNode**)malloc(sizeof(struct TreeNode) * 10001);
    *queue = root;
    int idx = 0, queue_size = 1, incr = 0;
    int* depth = (int*)malloc(sizeof(int) * 10001);
    int depth_idx = 0;

    while (idx < queue_size) {
        struct TreeNode* node = *(queue + idx);
        *(depth + depth_idx) = node->val;
        depth_idx++;
        if (!!node->left) {
            *(queue + queue_size + incr) = node->left;
            incr++;
        }

        if (!!node->right) {
            *(queue + queue_size + incr) = node->right;
            incr++;
        }

        if (idx + 1 == queue_size) {
            if (incr > 0)
                depth_idx = 0;

            queue_size += incr;
            incr = 0;
        }
        idx++;
    }

    return *depth;
}

